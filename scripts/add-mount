#!/bin/bash
BASENAME=$(basename "${0}")
VERSION="1.0.0"
STORAGE_TYPES=("cifs" "nfs")
#ERROR_CODE="0" # TODO Try implementing error handling

# TODO redo this, maybe {cat <<COVER ... COVER}|printf "%s\n" or something
help_text(){
    echo "${BASENAME}"
    echo "Usage: ${BASENAME} [-c cifs_version|-h|-v] storage_device mountpoint storage_type [credentials_file]"
    echo "If storage_type is \"cifs\" or \"nfs\" credentials_file must be specified."
    echo "-c Uses the specified cifs version. Options are: 3.0"
    echo "-h Prints this help message then exits."
    echo "-v Prints the version number then exits."
}

# TODO implement switch for cifs version, default to 3.0
while getopts "c:hv" _flag
do
    case "${_flag}" in
        c)
            CIFS_VERSION="${OPTARG}"
            printf "-c is not implemented at the moment. Will print value then skip.\n"
            printf "cifs version=%s\n" "${CIFS_VERSION}"
            ;;
        h)
            help_text
            exit 0
            ;;
        v)
            printf "%s\n" "${VERSION}"
            exit 0
            ;;
        *)
            help_text
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

is_member(){
    for _member in $(printf "%s" "$2")
    do
        if [[ "${1}" == "$_member" ]]; then return 0; fi
    done
    return 1
}

check_params(){
    if [ -z "${SOURCE}" ] || [ -z "${MOUNTPOINT}" ] || [ -z "${STORAGE_TYPE}" ]; then return 1; fi
    if ! "$(grep -q "${MOUNTPOINT}" /etc/fstab)"; then return 2; fi
    if ! is_member "${STORAGE_TYPE}" "${STORAGE_TYPES[@]}"; then return 3; fi
    if [ "${STORAGE_TYPE}" == "cifs" ] || [ "${STORAGE_TYPE}" == "nfs" ] && [ -z "${CREDS_PATH}" ]; then return 4; fi
    # TODO make sure all of the required params aren't dangerous
    #if ! sanitize_params; then return 5; fi
}

load_params(){
    local _ip_pattern='([0-9]+\.[0-9]+\.[0-9]+\.[0-9]){1}'
    SOURCE="${1}" # Either path to a device or a server for network storage
    if [[ "${SOURCE}" =~ ^([\/]{2}){0}$_ip_pattern ]]; then SOURCE="//${SOURCE}"; fi # Handle remote IP addresses entered both with and without leading "//"
    MOUNTPOINT="${2}" # Where on the filesystem to mount the source device
    # Add CIFS/SMB share: //server/share /path/to/mountpoint cifs credentials=/path/to/creds.file 0 0
    # Add NFS share: //server:/path/to/dir /path/to/mountpoint nfs credentials=/path/to/creds.file 0 0
    STORAGE_TYPE="${3}" # What type of mount this is. Options are blank, CIFS, or NFS
    CREDS_PATH="${4}" # What credentials to use to auth to the source device
    check_params
    return $?
}

# TODO verify what's actually needed for NFS
set_storage_type_options(){
    if [ "${1}" == "cifs" ] || [ "${1}" == "nfs" ]; then _creds="credentials=${CREDS_PATH}"; fi
    if [ "${1}" == "cifs" ]
    then
        _vers="vers=3.0"
        _who="uid=$(id -u "$(whoami)"),gid-$(id -g "$(whoami)")"
    fi
}

# TODO update this once NFS requirements are implemented
build_options(){
    set_storage_type_options "${STORAGE_TYPE}"
    OPTIONS="${_vers:+"$_vers",}${_creds:+"$_creds",}${_who:+"$_who",}iocharset=utf8"
    printf "%s" "${OPTIONS}"
}

build_entry(){
    printf "%s" "${SOURCE} ${MOUNTPOINT} ${STORAGE_TYPE} $(build_options) 0 0"
}

make_mountpoint(){
    if ! [ -d "${MOUNTPOINT}" ]; then mkdir "${MOUNTPOINT}"; fi
}

write_entry(){
    printf "%s\n" "${1}" | sudo tee -a /etc/fstab >/dev/null
    return $?
}

# TODO figure out a better way to do this stuff
get_error_msg(){
    case "$1" in
        1)
            _msg="Error in ${BASENAME}: Required parameters are missing."
            ;;
        2)
            _msg="Error in ${BASENAME}: mount point \"${MOUNTPOINT}\" is already in use."
            ;;
        3)
            _msg="Error in ${BASENAME}: \"${STORAGE_TYPE}\" is not a valid storage_type value."
            ;;
        4)
            _msg="Error in ${BASENAME}: a credentials file must be used when using a cifs/smb or nfs share."
            ;;
        5)
            _msg="Error in ${BASENAME}: dangerous input was detected."
            ;;
        6)
            _msg="Error in ${BASENAME}: Could not create temp copy of /etc/fstab."
            ;;
        7)
            _msg="Error in ${BASENAME}: Unable to build entry for /etc/fstab."
            ;;
        8)
            _msg="Error in ${BASENAME}: Could not add entry to /etc/fstab."
            ;;
        *)
            _msg="Error in ${BASENAME}: unknown error."
            ;;
    esac
    printf "%s Aborting.\n" "${_msg}"
    printf "Enter \"%s -h\" for more information.\n" "${BASENAME}"
    exit "$1"
}

# Main logic
main(){
    load_params "${1}" "${2}" "${3}" "${4}"
    _code=$?
    if [[ $_code != 0 ]]; then get_error_msg $_code; fi
    if ! _entry=$(build_entry); then exit $?; fi
    if ! make_mountpoint; then exit $?; fi
    # If we can't create a copy of /etc/fstab in /tmp there's probably a whole lot more we can't do, just abandon ship
    if ! [ -f "$(cp -p /etc/fstab /tmp/fstab.$$)" ]; then get_error_msg 6; fi
    printf "Add \"%s\" to /etc/fstab? y/n [n]: " "${_entry}"
    read -r _commit
    if [[ "${_commit}" != y ]]; then printf "Will not add entry to /etc/fstab. Exiting.\n"; exit 0; fi
    if ! write_entry "${_entry}"; then get_error_msg 7; fi
    #if ! printf "%s\n" "${_entry}"; then get_error_msg 7; fi
    if "$(grep -q "${MOUNTPOINT}" /etc/fstab)"; then get_error_msg 8; fi
    printf "Entry for \"%s\" added to /etc/fstab. Would you like to reload all mountpoints in /etc/fstab now? y/n [n]: " "${MOUNTPOINT}"
    read -r _reload
    if [[ "${_reload}" != y ]]
    then
        printf "Skipping reload of mountpoints in /etc/fstab. Run \"systemctl daemon-reload\" for changes to take effect.\n"
    else
        sudo systemctl daemon-reload
    fi
    printf "%s completed.\n" "${BASENAME}"
    # TODO implement auto restore of /etc/fstab if we hit errors after calling write_entry
    #rm -f /tmp/fstab.$$ 2>/dev/null
}
main "${1}" "${2}" "${3}" "${4}"
